// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.EMOTICON_MAP = {
    "angry": [">:(", ">_<"],
    "crying": [":'-(", ":'("],
    "surprise": [">:O", ":-O", ":O", ":-o", ":o", "8-0", "O_O", "o-o", "O_o", "o_O", "o_o", "O-O"],
    "tongue": [">:P", ":-P", ":P", "X-P", "x-p", "xp", "XP", ":-p", ":p", "=p", ":-b", ":b", "d:"],
    "laughing": [":-D", ":D", "8-D", "8D", "x-D", "xD", "X-D", "XD", "=-D", "=D", "=-3", "=3"],
    "happy": [":-)", ":)", ":o)", ":]", ":3", ":c)", ":>", "=]", "8)", "=)", ":}"],
    "sad": [">:[", ":-(", ":(", ":-c", ":c", ":-<", ":<", ":-[", ":[", ":{"],
    "wink": [";-)", ";)", "*-)", "*)", ";-]", ";]", ";D", ";^)", ":-,"],
    "uneasy": [">:\\", ">:/", ":-/", ":-.", ":/", ":\\", "=/", "=\\", ":L", "=L", ":S", ">.<"],
    "expressionless": [":|", ":-|"],
    "embarrassed": [":$"],
    "secretive": [":-X", ":X"],
    "heart": ["<3"],
    "broken": ["</3"]
  };

  window.VIDEO_LENGTH_MS = 1000;

  window.FirebaseInteractor = (function() {
    "Connects to Firebase and connects to chatroom variables.";
    function FirebaseInteractor() {
      this.init = __bind(this.init, this);
      this.fb_instance = new Firebase("https://proto1-cs247-p3-fb.firebaseio.com");
    }

    FirebaseInteractor.prototype.init = function() {
      this.fb_chat_room_id = window.get_fb_chat_room_id();
      this.fb_new_chat_room = this.fb_instance.child('chatrooms').child(this.fb_chat_room_id);
      this.fb_instance_users = this.fb_new_chat_room.child('users');
      this.fb_instance_stream = this.fb_new_chat_room.child('stream');
      this.fb_user_video_list = this.fb_new_chat_room.child('user_video_list');
      return this.fb_memory = this.fb_new_chat_room.child('memory');
    };

    return FirebaseInteractor;

  })();

  window.EmotionVideoStore = (function() {
    "Stores a map from each user to a list of that user's emotion videos";
    function EmotionVideoStore() {
      this.removeVideoItem = __bind(this.removeVideoItem, this);
      this.getRandomVideo = __bind(this.getRandomVideo, this);
      this.removeVideoSnapshot = __bind(this.removeVideoSnapshot, this);
      this.storePushedFb = __bind(this.storePushedFb, this);
      this.addUser = __bind(this.addUser, this);
      this.addVideoSnapshot = __bind(this.addVideoSnapshot, this);
      this.videos = {};
      this.fbResults = {};
    }

    EmotionVideoStore.prototype.addVideoSnapshot = function(data) {
      if (!(data.fromUser in this.videos)) {
        this.videos[data.fromUser] = [];
      }
      data.videoUrl = URL.createObjectURL(BlobConverter.base64_to_blob(data.v));
      this.videos[data.fromUser].push(data);
      console.log("videos: ");
      return console.log(this.videos);
    };

    EmotionVideoStore.prototype.addUser = function(username) {
      if (username in this.videos) {
        return;
      }
      return this.videos[username] = [];
    };

    EmotionVideoStore.prototype.storePushedFb = function(pushedFb, quickId) {
      this.fbResults[quickId] = pushedFb;
      console.log(quickId);
      return console.log(this.fbResults);
    };

    EmotionVideoStore.prototype.removeVideoSnapshot = function(data) {
      var _this = this;
      if (!(data.fromUser in this.videos)) {
        return;
      }
      this.videos[data.fromUser] = this.videos[data.fromUser] = _.reject(this.videos[data.fromUser], function(item) {
        return item.quickId === data.quickId;
      });
      console.log("((((((((( VIDEO REMOVED! videos: ))))))))) ");
      console.log(this.videos);
      return console.log(data);
    };

    EmotionVideoStore.prototype.getRandomVideo = function() {
      var allVideos;
      allVideos = _.flatten(_.values(this.videos));
      if (_.isEmpty(allVideos)) {
        console.error("Cannot get random video URL, no videos exist");
        return void 0;
      }
      return _.sample(allVideos);
    };

    EmotionVideoStore.prototype.removeVideoItem = function(video, fb_video_list) {
      var pushedFb;
      if (!(video.quickId in this.fbResults)) {
        return;
      }
      pushedFb = this.fbResults[video.quickId];
      if (_.isUndefined(pushedFb)) {
        delete this.fbResults[video.quickId];
        return;
      }
      pushedFb.remove();
      return delete this.fbResults[video.quickId];
    };

    return EmotionVideoStore;

  })();

  window.MemoryBuilder = (function() {
    function MemoryBuilder(elem, emotionVideoStore, fbInteractor) {
      this.elem = elem;
      this.emotionVideoStore = emotionVideoStore;
      this.fbInteractor = fbInteractor;
      this.respondToSetMemory = __bind(this.respondToSetMemory, this);
      this.randomlyMakeMemory = __bind(this.randomlyMakeMemory, this);
      $("#make_memory_button").on("click", this.randomlyMakeMemory);
    }

    MemoryBuilder.prototype.randomlyMakeMemory = function() {
      var chosenVideo, context, panelIndex, _i, _len, _ref;
      console.log("randomly making memory");
      context = {
        panels: []
      };
      _ref = ["first", "second", "third", "fourth"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        panelIndex = _ref[_i];
        chosenVideo = this.emotionVideoStore.getRandomVideo();
        console.log("got a random memory");
        context.panels.push({
          "video": chosenVideo,
          "panelIndex": panelIndex
        });
      }
      console.log("html: ");
      Templates["memoryBuilder"](context);
      console.log($("#memory_builder_container"));
      $("#memory_builder_container").html(Templates["memoryBuilder"](context));
      this.fbInteractor.fb_memory.set(context);
      return console.log(context);
    };

    MemoryBuilder.prototype.respondToSetMemory = function(context) {
      return $("#memory_builder_container").html(Templates["memoryBuilder"](context));
    };

    return MemoryBuilder;

  })();

  window.ChatRoom = (function() {
    "Main class to control the chat room UI of messages and video";
    function ChatRoom(fbInteractor, videoRecorder) {
      var _this = this;
      this.fbInteractor = fbInteractor;
      this.videoRecorder = videoRecorder;
      this.displayMessage = __bind(this.displayMessage, this);
      this.createVideoElem = __bind(this.createVideoElem, this);
      this.scrollToBottom = __bind(this.scrollToBottom, this);
      this.setupSubmissionBox = __bind(this.setupSubmissionBox, this);
      this.init = __bind(this.init, this);
      this.emotionVideoStore = new EmotionVideoStore();
      this.messageBefore = "";
      this.memoryBuilder = new MemoryBuilder($("#memory_builder_container"), this.emotionVideoStore, this.fbInteractor);
      this.fbInteractor.fb_instance_users.on("child_added", function(snapshot) {
        _this.displayMessage({
          m: snapshot.val().name + " joined the room",
          c: snapshot.val().c
        });
        return _this.emotionVideoStore.addUser(snapshot.val().name);
      });
      this.fbInteractor.fb_instance_stream.on("child_added", function(snapshot) {
        return _this.displayMessage(snapshot.val());
      });
      this.fbInteractor.fb_user_video_list.on("child_added", function(snapshot) {
        return _this.emotionVideoStore.addVideoSnapshot(snapshot.val());
      });
      this.fbInteractor.fb_user_video_list.on("child_removed", function(snapshot) {
        return _this.emotionVideoStore.removeVideoSnapshot(snapshot.val());
      });
      this.fbInteractor.fb_memory.on("value", function(snapshot) {
        return _this.memoryBuilder.respondToSetMemory(snapshot.val());
      });
      this.submissionEl = $("#submission input");
    }

    ChatRoom.prototype.init = function() {
      var url;
      url = document.location.origin + "/#" + this.fbInteractor.fb_chat_room_id;
      this.displayMessage({
        m: "Share this url with your friend to join this chat: <a href='" + url + "' target='_blank'>" + url + "</a>",
        c: "darkred"
      });
      if (!this.username) {
        this.username = "anonymous" + Math.floor(Math.random() * 1111);
      }
      this.userColor = "#" + ((1 << 24) * Math.random() | 0).toString(16);
      this.fbInteractor.fb_instance_users.push({
        name: this.username,
        c: this.userColor
      });
      $("#waiting").remove();
      return this.setupSubmissionBox();
    };

    ChatRoom.prototype.setupSubmissionBox = function() {
      var _this = this;
      return $("#submission input").on("keydown", function(event) {
        var emoticon, message, messageWithUser, pushedFb, videoToPush;
        if (event.which === 13) {
          message = _this.submissionEl.val();
          messageWithUser = _this.username + ": " + message;
          console.log(message);
          emoticon = EmotionProcessor.getEmoticon(message);
          if (emoticon) {
            videoToPush = {
              fromUser: _this.username,
              c: _this.userColor,
              v: _this.videoRecorder.curVideoBlob,
              emoticon: emoticon,
              messageCurrent: messageWithUser,
              messageBefore: _this.messageBefore,
              quickId: Math.floor(Math.random() * 1111)
            };
            pushedFb = _this.fbInteractor.fb_user_video_list.push();
            pushedFb.set(videoToPush);
            _this.emotionVideoStore.storePushedFb(pushedFb, videoToPush.quickId);
          }
          _this.fbInteractor.fb_instance_stream.push({
            m: messageWithUser,
            c: _this.userColor
          });
          return _this.submissionEl.val("");
        }
      });
    };

    ChatRoom.prototype.scrollToBottom = function(wait_time) {
      var _this = this;
      if (wait_time === 0) {
        $("html, body").animate({
          scrollTop: $(document).height()
        }, 200);
        return;
      }
      return setTimeout(function() {
        return $("html, body").animate({
          scrollTop: $(document).height()
        }, 200);
      }, wait_time);
    };

    ChatRoom.prototype.createVideoElem = function(video_data) {
      var source, video;
      video = document.createElement("video");
      video.autoplay = true;
      video.controls = false;
      video.loop = true;
      video.width = 120;
      source = document.createElement("source");
      source.src = URL.createObjectURL(BlobConverter.base64_to_blob(video_data));
      source.type = "video/webm";
      return [source, video];
    };

    ChatRoom.prototype.displayMessage = function(data) {
      var newMessage, source, video, _ref;
      this.messageBefore = data.m;
      newMessage = $("<div class='msg' style='color:" + data.c + "'>" + data.m + "</div>");
      newMessage.css("background-color", "#87cefa");
      $("#conversation").append(newMessage);
      if (data.v) {
        _ref = this.createVideoElem(data.v), source = _ref[0], video = _ref[1];
        video.appendChild(source);
        document.getElementById("conversation").appendChild(video);
      }
      return this.scrollToBottom(0);
    };

    return ChatRoom;

  })();

  $(document).ready(function() {
    var chatRoom, fbInteractor, videoRecorder;
    fbInteractor = new FirebaseInteractor();
    fbInteractor.init();
    videoRecorder = new VideoRecorder();
    chatRoom = new ChatRoom(fbInteractor, videoRecorder);
    chatRoom.init();
    return videoRecorder.connectWebcam();
  });

}).call(this);
