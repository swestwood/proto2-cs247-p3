// Generated by CoffeeScript 1.6.3
(function() {
  var BlobConverter, ChatRoom, FirebaseInteractor, VideoRecorder,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  FirebaseInteractor = (function() {
    "Connects to Firebase and connects to chatroom variables.";
    function FirebaseInteractor() {
      this.init = __bind(this.init, this);
      this.get_fb_chat_room_id = __bind(this.get_fb_chat_room_id, this);
      this.fb_instance = new Firebase("https://proto1-cs247-p3-fb.firebaseio.com");
    }

    FirebaseInteractor.prototype.get_fb_chat_room_id = function() {
      var url_segments;
      url_segments = document.location.href.split("/#");
      if (url_segments[1]) {
        return url_segments[1];
      }
      return Math.random().toString(36).substring(7);
    };

    FirebaseInteractor.prototype.init = function() {
      this.fb_chat_room_id = this.get_fb_chat_room_id();
      this.fb_new_chat_room = this.fb_instance.child('chatrooms').child(this.fb_chat_room_id);
      this.fb_instance_users = this.fb_new_chat_room.child('users');
      return this.fb_instance_stream = this.fb_new_chat_room.child('stream');
    };

    return FirebaseInteractor;

  })();

  ChatRoom = (function() {
    "Main class to control the chat room display of messages and video";
    function ChatRoom(fbInteractor, videoRecorder) {
      var _this = this;
      this.fbInteractor = fbInteractor;
      this.videoRecorder = videoRecorder;
      this.displayMessage = __bind(this.displayMessage, this);
      this.createVideoElem = __bind(this.createVideoElem, this);
      this.scrollToBottom = __bind(this.scrollToBottom, this);
      this.hasEmotions = __bind(this.hasEmotions, this);
      this.setupSubmissionBox = __bind(this.setupSubmissionBox, this);
      this.init = __bind(this.init, this);
      this.fbInteractor.fb_instance_users.on("child_added", function(snapshot) {
        return _this.displayMessage({
          m: snapshot.val().name + " joined the room",
          c: snapshot.val().c
        });
      });
      this.fbInteractor.fb_instance_stream.on("child_added", function(snapshot) {
        return _this.displayMessage(snapshot.val());
      });
      this.submissionEl = $("#submission input");
    }

    ChatRoom.prototype.init = function() {
      this.displayMessage({
        m: "Share this url with your friend to join this chat: " + document.location.origin + "/#" + this.fbInteractor.fb_chat_room_id,
        c: "red"
      });
      this.username = window.prompt("Welcome, warrior! please declare your name?");
      if (!this.username) {
        this.username = "anonymous" + Math.floor(Math.random() * 1111);
      }
      this.userColor = "#" + ((1 << 24) * Math.random() | 0).toString(16);
      this.fbInteractor.fb_instance_users.push({
        name: this.username,
        c: this.userColor
      });
      $("#waiting").remove();
      return this.setupSubmissionBox();
    };

    ChatRoom.prototype.setupSubmissionBox = function() {
      var _this = this;
      return $("#submission input").on("keydown", function(event) {
        if (event.which === 13) {
          console.log(_this.submissionEl.val());
          if (_this.hasEmotions(_this.submissionEl.val())) {
            _this.fbInteractor.fb_instance_stream.push({
              m: _this.username + ": " + _this.submissionEl.val(),
              v: _this.videoRecorder.curVideoBlob,
              c: _this.userColor
            });
          } else {
            _this.fbInteractor.fb_instance_stream.push({
              m: _this.username + ": " + _this.submissionEl.val(),
              c: _this.userColor
            });
          }
          return _this.submissionEl.val("");
        }
      });
    };

    ChatRoom.prototype.hasEmotions = function(msg) {
      var emoticon, emoticons, _i, _len;
      emoticons = ["lol", ":)", ":("];
      for (_i = 0, _len = emoticons.length; _i < _len; _i++) {
        emoticon = emoticons[_i];
        if (msg.indexOf(emoticon) !== -1) {
          return true;
        }
      }
      return false;
    };

    ChatRoom.prototype.scrollToBottom = function(wait_time) {
      var _this = this;
      return setTimeout(function() {
        return $("html, body").animate({
          scrollTop: $(document).height()
        }, 200);
      }, wait_time);
    };

    ChatRoom.prototype.createVideoElem = function(video_data) {
      var source, video;
      video = document.createElement("video");
      video.autoplay = true;
      video.controls = false;
      video.loop = true;
      video.width = 120;
      source = document.createElement("source");
      source.src = URL.createObjectURL(BlobConverter.base64_to_blob(video_data));
      source.type = "video/webm";
      return [source, video];
    };

    ChatRoom.prototype.displayMessage = function(data) {
      var source, video, _ref;
      $("#conversation").append("<div class='msg' style='color:" + data.c + "'>" + data.m + "</div>");
      if (data.v) {
        _ref = this.createVideoElem(data.v), source = _ref[0], video = _ref[1];
        video.appendChild(source);
        document.getElementById("conversation").appendChild(video);
      }
      return this.scrollToBottom(0);
    };

    return ChatRoom;

  })();

  VideoRecorder = (function() {
    "Handles the mechanics of recording videos every 3 seconds.";
    function VideoRecorder() {
      this.dataAvailableCallback = __bind(this.dataAvailableCallback, this);
      this.mediaSuccessCallback = __bind(this.mediaSuccessCallback, this);
      this.connectWebcam = __bind(this.connectWebcam, this);
      this.curVideoBlob = null;
    }

    VideoRecorder.prototype.connectWebcam = function() {
      var mediaConstraints, onMediaError, onMediaSuccess,
        _this = this;
      mediaConstraints = {
        video: true,
        audio: false
      };
      onMediaSuccess = this.mediaSuccessCallback;
      onMediaError = function(e) {
        return console.error('media error', e);
      };
      return navigator.getUserMedia(mediaConstraints, onMediaSuccess, onMediaError);
    };

    VideoRecorder.prototype.mediaSuccessCallback = function(stream) {
      var index, mediaRecorder, second_counter, second_counter_update, time, video, video_container, video_height, video_width, webcam_stream,
        _this = this;
      video_width = 160;
      video_height = 120;
      webcam_stream = document.getElementById('webcam_stream');
      video = document.createElement('video');
      webcam_stream.innerHTML = "";
      video = mergeProps(video, {
        controls: false,
        width: video_width,
        height: video_height,
        src: URL.createObjectURL(stream)
      });
      video.play();
      webcam_stream.appendChild(video);
      time = 0;
      second_counter = document.getElementById('second_counter');
      second_counter_update = setInterval(function() {
        return second_counter.innerHTML = time++;
      }, 1000);
      video_container = document.getElementById('video_container');
      mediaRecorder = new MediaStreamRecorder(stream);
      index = 1;
      mediaRecorder.mimeType = 'video/webm';
      mediaRecorder.video_width = video_width / 2;
      mediaRecorder.video_height = video_height / 2;
      mediaRecorder.ondataavailable = this.dataAvailableCallback;
      setInterval(function() {
        mediaRecorder.stop();
        return mediaRecorder.start(3000);
      }, 3000);
      return console.log("connect to media stream!");
    };

    VideoRecorder.prototype.dataAvailableCallback = function(blob) {
      var _this = this;
      video_container.innerHTML = "";
      return BlobConverter.blob_to_base64(blob, function(b64_data) {
        return _this.curVideoBlob = b64_data;
      });
    };

    return VideoRecorder;

  })();

  BlobConverter = (function() {
    "Static methods for converting blob to base 64 and vice versa\nfor performance bench mark, please refer to http://jsperf.com/blob-base64-conversion/5\nnote useing String.fromCharCode.apply can cause callstack error";
    function BlobConverter() {}

    BlobConverter.blob_to_base64 = function(blob, callback) {
      var reader;
      reader = new FileReader();
      reader.onload = function() {
        var base64, dataUrl;
        dataUrl = reader.result;
        base64 = dataUrl.split(',')[1];
        return callback(base64);
      };
      return reader.readAsDataURL(blob);
    };

    BlobConverter.base64_to_blob = function(base64) {
      var binary, blob, buffer, i, len, view, _i;
      binary = atob(base64);
      len = binary.length;
      buffer = new ArrayBuffer(len);
      view = new Uint8Array(buffer);
      for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
        view[i] = binary.charCodeAt(i);
      }
      blob = new Blob([view]);
      return blob;
    };

    return BlobConverter;

  }).call(this);

  $(document).ready(function() {
    var chatRoom, fbInteractor, videoRecorder;
    fbInteractor = new FirebaseInteractor();
    fbInteractor.init();
    videoRecorder = new VideoRecorder();
    chatRoom = new ChatRoom(fbInteractor, videoRecorder);
    chatRoom.init();
    return videoRecorder.connectWebcam();
  });

}).call(this);
