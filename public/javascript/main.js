// Generated by CoffeeScript 1.7.1
(function() {
  var StandAloneMemory,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.EMOTICON_MAP = {
    "angry": [">:(", ">_<"],
    "crying": [":'-(", ":'("],
    "surprise": [">:O", ":-O", ":O", ":-o", ":o", "8-0", "O_O", "o-o", "O_o", "o_O", "o_o", "O-O"],
    "tongue": [">:P", ":-P", ":P", "X-P", "x-p", "xp", "XP", ":-p", ":p", "=p", ":-b", ":b", "d:"],
    "laughing": [":-D", ":D", "8-D", "8D", "x-D", "xD", "X-D", "XD", "=-D", "=D", "=-3", "=3"],
    "happy": [":-)", ":)", ":o)", ":]", ":3", ":c)", ":>", "=]", "8)", "=)", ":}"],
    "sad": [">:[", ":-(", ":(", ":-c", ":c", ":-<", ":<", ":-[", ":[", ":{"],
    "wink": [";-)", ";)", "*-)", "*)", ";-]", ";]", ";D", ";^)", ":-,"],
    "uneasy": [">:\\", ">:/", ":-/", ":-.", ":/", ":\\", "=/", "=\\", ":L", "=L", ":S", ">.<"],
    "expressionless": [":|", ":-|"],
    "embarrassed": [":$"],
    "secretive": [":-X", ":X"],
    "heart": ["<3"],
    "broken": ["</3"]
  };

  window.VIDEO_LENGTH_MS = 3000;

  window.FirebaseInteractor = (function() {
    "Connects to Firebase and connects to chatroom variables.";
    function FirebaseInteractor() {
      this.initMemoryVersion = __bind(this.initMemoryVersion, this);
      this.init = __bind(this.init, this);
      this.fb_instance = new Firebase("https://proto2-cs247-p3-fb.firebaseio.com");
    }

    FirebaseInteractor.prototype.init = function() {
      this.fb_chat_room_id = window.get_fb_chat_room_id();
      this.fb_new_chat_room = this.fb_instance.child('chatrooms').child(this.fb_chat_room_id);
      this.fb_instance_users = this.fb_new_chat_room.child('users');
      this.fb_instance_stream = this.fb_new_chat_room.child('stream');
      this.fb_user_video_list = this.fb_new_chat_room.child('user_video_list');
      this.fb_memory = this.fb_new_chat_room.child('memory');
      return this.fb_memories = this.fb_instance.child('memories');
    };

    FirebaseInteractor.prototype.initMemoryVersion = function() {
      return this.fb_memories = this.fb_instance.child('memories');
    };

    return FirebaseInteractor;

  })();

  window.EmotionVideoStore = (function() {
    "Stores a map from each user to a list of that user's emotion videos";
    function EmotionVideoStore() {
      this.removeVideoItem = __bind(this.removeVideoItem, this);
      this.sampleRandomVideos = __bind(this.sampleRandomVideos, this);
      this.removeVideoSnapshot = __bind(this.removeVideoSnapshot, this);
      this.storePushedFb = __bind(this.storePushedFb, this);
      this.addUser = __bind(this.addUser, this);
      this.addVideoSnapshot = __bind(this.addVideoSnapshot, this);
      this.videos = {};
      this.fbResults = {};
    }

    EmotionVideoStore.prototype.addVideoSnapshot = function(data) {
      if (!(data.fromUser in this.videos)) {
        this.videos[data.fromUser] = [];
      }
      data.videoUrl = URL.createObjectURL(BlobConverter.base64_to_blob(data.v));
      this.videos[data.fromUser].push(data);
      console.log("videos: ");
      return console.log(this.videos);
    };

    EmotionVideoStore.prototype.addUser = function(username) {
      if (username in this.videos) {
        return;
      }
      return this.videos[username] = [];
    };

    EmotionVideoStore.prototype.storePushedFb = function(pushedFb, quickId) {
      this.fbResults[quickId] = pushedFb;
      console.log(quickId);
      return console.log(this.fbResults);
    };

    EmotionVideoStore.prototype.removeVideoSnapshot = function(data) {
      if (!(data.fromUser in this.videos)) {
        return;
      }
      this.videos[data.fromUser] = this.videos[data.fromUser] = _.reject(this.videos[data.fromUser], (function(_this) {
        return function(item) {
          return item.quickId === data.quickId;
        };
      })(this));
      console.log("((((((((( VIDEO REMOVED! videos: ))))))))) ");
      console.log(this.videos);
      return console.log(data);
    };

    EmotionVideoStore.prototype.sampleRandomVideos = function(sampleSize) {
      var allVideos, sampled;
      allVideos = _.flatten(_.values(this.videos));
      if (_.isEmpty(allVideos)) {
        console.error("Cannot get random video URL, no videos exist");
        return void 0;
      }
      sampled = _.sample(allVideos, sampleSize);
      while (_.size(sampled) < sampleSize) {
        sampled.push(_.sample(allVideos));
      }
      return sampled;
    };

    EmotionVideoStore.prototype.removeVideoItem = function(video, fb_video_list) {
      var pushedFb;
      if (!(video.quickId in this.fbResults)) {
        return;
      }
      pushedFb = this.fbResults[video.quickId];
      if (_.isUndefined(pushedFb)) {
        delete this.fbResults[video.quickId];
        return;
      }
      pushedFb.remove();
      return delete this.fbResults[video.quickId];
    };

    return EmotionVideoStore;

  })();

  window.MemoryBuilder = (function() {
    function MemoryBuilder(elem, emotionVideoStore, fbInteractor) {
      this.elem = elem;
      this.emotionVideoStore = emotionVideoStore;
      this.fbInteractor = fbInteractor;
      this.respondToSetMemory = __bind(this.respondToSetMemory, this);
      this.randomlyMakeMemory = __bind(this.randomlyMakeMemory, this);
      this.elem.html(Templates["memoryBuilder"]({
        "waitingForVideo": true
      }));
      $("#make_memory_button").on("click", this.randomlyMakeMemory);
    }

    MemoryBuilder.prototype.randomlyMakeMemory = function() {
      var chosenEffects, chosenVideo, chosenVideos, context, effects, memoryId, panelI, panelNames, savedMemory, savedMemoryContext, _i, _ref;
      console.log("randomly making memory");
      context = {
        panels: []
      };
      panelNames = ["first", "second", "third", "fourth"];
      effects = ["sepia", "brightness", "highcontrast", "highsaturate", "huerotate", "tint", "", "invert"];
      chosenVideos = this.emotionVideoStore.sampleRandomVideos(_.size(panelNames));
      chosenEffects = _.sample(effects, _.size(panelNames));
      for (panelI = _i = 0, _ref = _.size(panelNames); 0 <= _ref ? _i < _ref : _i > _ref; panelI = 0 <= _ref ? ++_i : --_i) {
        chosenVideo = chosenVideos[panelI];
        context.panels.push({
          "video": chosenVideo,
          "panelIndex": panelNames[panelI],
          "effect": chosenEffects[panelI]
        });
      }
      memoryId = "memory-" + _.sample(window.listOfAdjectives) + "-" + _.sample(window.listOfAnimals) + "-" + _.random(1, 1000);
      savedMemory = this.fbInteractor.fb_memories.child(memoryId);
      savedMemoryContext = savedMemory.child("context");
      savedMemoryContext.set(context);
      context.memoryUrl = document.location.origin + "/#&" + memoryId;
      $("#memory_builder_container").html(Templates["memoryBuilder"](context));
      $("#keep_memory_link").append("Keep this memory forever: " + "<a href=" + context.memoryUrl + " target='_blank'>" + context.memoryUrl + "</a>");
      $("#make_memory_button").on("click", this.randomlyMakeMemory);
      console.log(context.memoryUrl);
      this.fbInteractor.fb_memory.set(context);
      return console.log(context);
    };

    MemoryBuilder.prototype.respondToSetMemory = function(context) {
      var panel, _i, _len, _ref;
      console.log("respondToSetMemory");
      console.log(context.memoryUrl);
      _ref = context.panels;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        panel = _ref[_i];
        panel.video.videoUrl = URL.createObjectURL(BlobConverter.base64_to_blob(panel.video.v));
      }
      $("#memory_builder_container").html(Templates["memoryBuilder"](context));
      return $("#make_memory_button").on("click", this.randomlyMakeMemory);
    };

    return MemoryBuilder;

  })();

  window.ChatRoom = (function() {
    "Main class to control the chat room UI of messages and video";
    function ChatRoom(fbInteractor, videoRecorder) {
      var context;
      this.fbInteractor = fbInteractor;
      this.videoRecorder = videoRecorder;
      this.displayMessage = __bind(this.displayMessage, this);
      this.createVideoElem = __bind(this.createVideoElem, this);
      this.scrollToBottom = __bind(this.scrollToBottom, this);
      this.setupSubmissionBox = __bind(this.setupSubmissionBox, this);
      this.init = __bind(this.init, this);
      context = [];
      $("#entire_memory_wrapper").html(Templates["memoryWrapper"](context));
      this.lastPoster = null;
      this.backgroundColor = "#ffddc7";
      this.emotionVideoStore = new EmotionVideoStore();
      this.messageBefore = "";
      this.memoryBuilder = new MemoryBuilder($("#memory_builder_container"), this.emotionVideoStore, this.fbInteractor);
      this.fbInteractor.fb_instance_users.on("child_added", (function(_this) {
        return function(snapshot) {
          _this.displayMessage({
            m: " joined the room",
            c: snapshot.val().c,
            u: snapshot.val().name,
            j: "joined"
          });
          return _this.emotionVideoStore.addUser(snapshot.val().name);
        };
      })(this));
      this.fbInteractor.fb_instance_stream.on("child_added", (function(_this) {
        return function(snapshot) {
          var msg, spliced_message, username;
          msg = snapshot.val().m;
          username = msg.substr(0, msg.indexOf(":"));
          spliced_message = msg.substr(msg.indexOf(":") + 1);
          return _this.displayMessage({
            m: spliced_message,
            c: snapshot.val().c,
            u: username
          });
        };
      })(this));
      this.fbInteractor.fb_user_video_list.on("child_added", (function(_this) {
        return function(snapshot) {
          _this.emotionVideoStore.addVideoSnapshot(snapshot.val());
          $("#make_memory_button").css({
            "visibility": "visible"
          });
          $("#make_memory_button").on("click", _this.randomlyMakeMemory);
          return $(".instructions-memory").hide();
        };
      })(this));
      this.fbInteractor.fb_user_video_list.on("child_removed", (function(_this) {
        return function(snapshot) {
          return _this.emotionVideoStore.removeVideoSnapshot(snapshot.val());
        };
      })(this));
      this.fbInteractor.fb_memory.on("value", (function(_this) {
        return function(snapshot) {
          if (!snapshot || !snapshot.val()) {
            return;
          }
          return _this.memoryBuilder.respondToSetMemory(snapshot.val());
        };
      })(this));
      this.submissionEl = $("#submission input");
    }

    ChatRoom.prototype.init = function() {
      var url;
      url = document.location.origin + "/#" + this.fbInteractor.fb_chat_room_id;
      this.displayMessage({
        m: "Share this url with your friend to join this chat: <a href='" + url + "' target='_blank'>" + url + "</a>",
        c: "darkred",
        s: "share"
      });
      this.username = window.prompt("Welcome! What's your name?");
      if (!this.username) {
        this.username = "anonymous" + Math.floor(Math.random() * 1111);
      }
      this.userColor = "#" + ((1 << 24) * Math.random() | 0).toString(16);
      this.userColor = this.userColor.substr(0, 1) + '3' + this.userColor.substr(2);
      this.userColor = this.userColor.substr(0, 3) + '3' + this.userColor.substr(4);
      this.fbInteractor.fb_instance_users.push({
        name: this.username,
        c: this.userColor
      });
      $("#waiting").remove();
      return this.setupSubmissionBox();
    };

    ChatRoom.prototype.setupSubmissionBox = function() {
      return $("#submission input").on("keydown", (function(_this) {
        return function(event) {
          var emoticon, message, messageWithUser, pushedFb, videoToPush;
          if (event.which === 13) {
            message = _this.submissionEl.val();
            messageWithUser = _this.username + ": " + message;
            console.log(messageWithUser);
            emoticon = EmotionProcessor.getEmoticon(message);
            if (emoticon) {
              videoToPush = {
                fromUser: _this.username,
                c: _this.userColor,
                v: _this.videoRecorder.curVideoBlob,
                emoticon: emoticon,
                messageCurrent: messageWithUser,
                messageBefore: _this.messageBefore,
                quickId: _.random(1, 1000000)
              };
              pushedFb = _this.fbInteractor.fb_user_video_list.push();
              pushedFb.set(videoToPush);
              _this.emotionVideoStore.storePushedFb(pushedFb, videoToPush.quickId);
            }
            _this.fbInteractor.fb_instance_stream.push({
              m: messageWithUser,
              c: _this.userColor
            });
            return _this.submissionEl.val("");
          }
        };
      })(this));
    };

    ChatRoom.prototype.scrollToBottom = function(wait_time) {
      var chatElem;
      chatElem = document.getElementById('conversation');
      if (wait_time === 0) {
        chatElem.scrollTop = chatElem.scrollHeight;
        return;
      }
      return setTimeout((function(_this) {
        return function() {
          return chatElem.scrollTop = chatElem.scrollHeight;
        };
      })(this), wait_time);
    };

    ChatRoom.prototype.createVideoElem = function(video_data) {
      var source, video;
      video = document.createElement("video");
      video.autoplay = true;
      video.controls = false;
      video.loop = true;
      video.width = 120;
      source = document.createElement("source");
      source.src = URL.createObjectURL(BlobConverter.base64_to_blob(video_data));
      source.type = "video/webm";
      return [source, video];
    };

    ChatRoom.prototype.displayMessage = function(data) {
      var changePoster, newHeader, newMessage, source, video, _ref;
      this.messageBefore = data.m;
      changePoster = false;
      if (this.lastPoster === null) {
        this.lastPoster = data.u;
      } else {
        if (this.lastPoster !== data.u) {
          this.lastPoster = data.u;
          if (this.backgroundColor === "#f8ede6") {
            this.backgroundColor = "#ffddc7";
          } else {
            this.backgroundColor = "#f8ede6";
          }
          changePoster = true;
        }
      }
      if (changePoster) {
        if (data.j === "joined") {
          newHeader = $("<div class='msg' style='color:" + data.c + "'>" + data.u + data.m + "</div>");
          newMessage = null;
        } else {
          newHeader = $("<div class='msg' style='color:" + data.c + "'>" + data.u + "</div>");
          newMessage = $("<div class='msgtext' style='color:" + data.c + "'>" + data.m + "</div>");
        }
      } else {
        newHeader = null;
        newMessage = $("<div class='msgtext' style='color:" + data.c + "'>" + data.m + "</div>");
      }
      if (newHeader !== null) {
        newHeader.css("font-weight", "bold");
        newHeader.css("font-style", "16px");
        newHeader.css("background-color", this.backgroundColor);
        $("#conversation").append(newHeader);
      }
      if (newMessage !== null) {
        newMessage.css("background-color", this.backgroundColor);
        $("#conversation").append(newMessage);
      }
      if (data.v) {
        _ref = this.createVideoElem(data.v), source = _ref[0], video = _ref[1];
        video.appendChild(source);
        document.getElementById("conversation").appendChild(video);
      }
      return this.scrollToBottom(0);
    };

    return ChatRoom;

  })();

  StandAloneMemory = (function() {
    function StandAloneMemory(memoryId, fbInteractor) {
      this.memoryId = memoryId;
      this.fbInteractor = fbInteractor;
      this.memoryItem = this.fbInteractor.fb_instance.child('memories').child(this.memoryId).child("context");
      if (!this.memoryItem) {
        console.error("memory item not found.. ");
        $("body").html("<h3>Sorry, memory could not be found</h3>");
        return;
      }
      this.memoryItem.on("value", (function(_this) {
        return function(snapshot) {
          var context, panel, _i, _len, _ref;
          context = snapshot.val();
          console.log(context);
          if (!context) {
            $("body").html("<h3>Sorry, this memory could not be found. Check the URL. Or make a new memory!</h3>");
            return;
          }
          _ref = context.panels;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            panel = _ref[_i];
            panel.video.videoUrl = URL.createObjectURL(BlobConverter.base64_to_blob(panel.video.v));
          }
          context.standalone = true;
          $("body").html(Templates["memoryWrapper"]());
          return $("#memory_builder_container").html(Templates["memoryBuilder"](context));
        };
      })(this));
    }

    return StandAloneMemory;

  })();

  $(document).ready(function() {
    var chatRoom, fbInteractor, memoryId, standAloneMemory, videoRecorder;
    fbInteractor = new FirebaseInteractor();
    memoryId = window.get_memory_id();
    if (memoryId) {
      $("#waiting").remove();
      fbInteractor.initMemoryVersion();
      return standAloneMemory = new StandAloneMemory(memoryId, fbInteractor);
    } else {
      fbInteractor.init();
      videoRecorder = new VideoRecorder();
      chatRoom = new ChatRoom(fbInteractor, videoRecorder);
      chatRoom.init();
      return videoRecorder.connectWebcam();
    }
  });

}).call(this);
